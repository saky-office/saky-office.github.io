<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.saky.site</id>
    <title>Shellblock</title>
    <updated>2025-09-07T05:04:56.211Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.saky.site"/>
    <link rel="self" href="https://blog.saky.site/atom.xml"/>
    <subtitle>永远相信美好的事情即将发生</subtitle>
    <logo>https://blog.saky.site/images/avatar.png</logo>
    <icon>https://blog.saky.site/favicon.ico</icon>
    <rights>All rights reserved 2025, Shellblock</rights>
    <entry>
        <title type="html"><![CDATA[ESXI 虚拟机 HomeAssistant OS断电后无法开机]]></title>
        <id>https://blog.saky.site/post/esxi-xu-ni-ji-homeassistant-os-duan-dian-hou-wu-fa-kai-ji/</id>
        <link href="https://blog.saky.site/post/esxi-xu-ni-ji-homeassistant-os-duan-dian-hou-wu-fa-kai-ji/">
        </link>
        <updated>2025-09-07T04:50:16.000Z</updated>
        <content type="html"><![CDATA[<p>意外断电后在ESXI中无法启动HomeAssistant OS，提示</p>
<blockquote>
<p>无法打开虚拟机 HomeAssistant 的电源。对象类型需要托管的 I/O 单击此处了解更多</p>
</blockquote>
<h2 id="解决如下">解决如下</h2>
<ol>
<li>打开ESXI近期任务中无法开启HAOS的错误信息</li>
<li>找到错误信息中虚拟磁盘文件的路径[PATH]，如下图所示<br>
<img src="https://oss.956898603.xyz/2025/09/07/68bd0f49abe14.png" alt="" loading="lazy"></li>
<li>SSH连接ESXI并Root登录</li>
</ol>
<p>执行以下两条命令</p>
<pre><code class="language-shell">vmkfstools -x check [PATH]
vmkfstools -x repair [PATH]
</code></pre>
<p>期中[path]要替换成你第二步中得到的文件路径，像下面这样</p>
<pre><code class="language-shell">vmkfstools -x check /vmfs/volumes/63c83f14-875e5026-4174-60beb4086394/haos_ova-12.0.vmdk
vmkfstools -x repair /vmfs/volumes/63c83f14-875e5026-4174-60beb4086394/haos_ova-12.0.vmdk
</code></pre>
<p>执行完成后，HAOS就可以启动了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 macOS 上使用 VCam 进行 Vtuber 直播]]></title>
        <id>https://blog.saky.site/post/zai-macos-shang-shi-yong-vcam-jin-xing-vtuber-zhi-bo/</id>
        <link href="https://blog.saky.site/post/zai-macos-shang-shi-yong-vcam-jin-xing-vtuber-zhi-bo/">
        </link>
        <updated>2025-01-17T03:08:30.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>阅读原文：<a href="https://nolebase.ayaka.io/to/6107984717">https://nolebase.ayaka.io/to/6107984717</a></p>
</blockquote>
<h2 id="延伸阅读">延伸阅读</h2>
<p>VCam 官方的文档写的还是很好的，如果遇到什么问题其实都可以去 VCam 的文档里面探寻一下：<a href="https://docs.vcamapp.com/">VCam - VCam Docs</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quantumult X 自动化任务的简单食用教程]]></title>
        <id>https://blog.saky.site/post/quanx-task/</id>
        <link href="https://blog.saky.site/post/quanx-task/">
        </link>
        <updated>2024-04-17T08:13:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前置准备">前置准备</h2>
<p>IOS设备+美区账号+7.99USD+科学上网</p>
<p>Quantumult X (以下简称 圈x)下载：<a href="https://apps.apple.com/us/app/quantumult-x/id1443988620">https://apps.apple.com/us/app/quantumult-x/id1443988620</a></p>
<h2 id="圈x初始化">圈X初始化</h2>
<p>搭配此文章使用：<a href="https://www.kejiwanjia.net/jiaocheng/zheteng/notes/21016.html">Quantumult X(圈x)系列之小白快速入门篇</a></p>
<h2 id="boxjs-安装">BoxJs 安装</h2>
<p>如果你使用的是 圈x v1.0.29 (670) 及以上版本请点击》》》<a href="https://api.boxjs.app/quanx-install">一键安装</a></p>
<p>安装完成后请使用Safari浏览器打开链接：<a href="http://boxjs.com">http://boxjs.com</a></p>
<p>点击订阅，右上角加号，添加下面的链接</p>
<pre><code>https://git.moelove.tk/carcloud/QuanX/raw/branch/main/sliverkiss.boxjs.json
</code></pre>
<h2 id="添加task任务">添加Task任务</h2>
<p>Task库地址：<a href="https://github.com/Orz-3/QuantumultX/tree/master/Task">https://github.com/Orz-3/QuantumultX/tree/master/Task</a></p>
<figure data-type="image" tabindex="1"><img src="https://www.kejiwanjia.net/wp-content/uploads/2021/09/image-221.png" alt="" loading="lazy"></figure>
<p>添加Task库，添加下面的链接</p>
<pre><code>@sliverkiss

https://git.moelove.tk/carcloud/QuanX/raw/branch/main/sliverkiss.gallery.json
</code></pre>
<p>下面以<code>建行生活</code>为例说明</p>
<ol>
<li>点击建行生活，会出现4个选项，下面依次说明</li>
</ol>
<pre><code>添加：添加此脚本
查看：查看此脚本内容
添加附加组件：自动CK获取
查看附加组件：查看抓包脚本内容
</code></pre>
<ol start="2">
<li>依次点击<code>添加</code>和<code>添加附加组件</code></li>
<li>打开建行生活，签到，圈x自动获取ck并提示获取成功</li>
<li>返回圈x再次点击建行生活-移除附加组件，避免不必要的重写</li>
<li>打开boxjs，<code>应用</code>-找到<code>建行生活</code>，右边五角星点击</li>
<li>返回boxjs主页，点击建行生活，信用卡用户选择<code>下个断签日</code>为<code>不断签</code>，下拉<code>保存</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[将网站备份到IPFS]]></title>
        <id>https://blog.saky.site/post/ipfs-web/</id>
        <link href="https://blog.saky.site/post/ipfs-web/">
        </link>
        <updated>2024-03-07T04:05:57.000Z</updated>
        <content type="html"><![CDATA[<p>最近将本站部署到了ipfs上</p>
<blockquote>
<p>IPFS Hash：Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw<br>
IPFS Web：<a href="https://blog.k-on.life/">https://blog.k-on.life/</a></p>
</blockquote>
<p><a href="https://ping.chinaz.com/blog.k-on.life">PING检测：</a><br>
<img src="https://oss.956898603.xyz/2024/03/07/65e93fad6ab92.png" alt="" loading="lazy"></p>
<p>如果你的浏览器是支持ipfs的brave浏览器的话，可以直接点下面的跳转<br>
<a href="ipfs://Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw">ipfs://Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw</a></p>
<p>如果不是的话，可以使用公共网关<br>
cf网关</p>
<ul>
<li><a href="https://cloudflare-ipfs.com/ipfs/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/">https://cloudflare-ipfs.com/ipfs/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/</a></li>
<li><a href="https://cf-ipfs.com/ipfs/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/">https://cf-ipfs.com/ipfs/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/</a></li>
</ul>
<p>web3.storage网关</p>
<ul>
<li><a href="https://w3s.link/ipfs/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/">https://w3s.link/ipfs/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/</a></li>
</ul>
<p>当然，也可以用别的网关<br>
下面网址，可以检测下各个网关的速度和连通性<br>
<a href="https://ipfs.github.io/public-gateway-checker/">https://ipfs.github.io/public-gateway-checker/</a></p>
<p>博主自建网关：</p>
<ul>
<li><a href="https://ipfs.moelove.tk/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/">https://ipfs.moelove.tk/Qma7Q1JGdoUFKETYWGKyfn9rPyAZxovszvY83X3BtdYyUw/</a></li>
</ul>
<p><strong>IPFS部署</strong><br>
用的是<a href="https://fleek.co/">fleek</a> 来部署的<br>
类似的平台还有这些，都可以试下（ps. 🔗无 aff）</p>
<ul>
<li><a href="https://dashboard.4everland.org/login">https://dashboard.4everland.org/login</a></li>
<li><a href="https://app.pinata.cloud/pinmanager">https://app.pinata.cloud/pinmanager</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二次元、漂亮的借记卡推荐]]></title>
        <id>https://blog.saky.site/post/debitcard/</id>
        <link href="https://blog.saky.site/post/debitcard/">
        </link>
        <updated>2024-02-28T04:14:14.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文简单分享几个卡面漂亮的借记卡<br>
所有申请链接均为官方申请通道，不带有aff<br>
更多卡片分享请访问：<a href="https://docs.moelove.tk/web/#/646993789/199478096">https://docs.moelove.tk/web/#/646993789/199478096</a></p>
</blockquote>
<h2 id="中国银行">中国银行</h2>
<h3 id="哔哩哔哩2233牡丹亭卡">哔哩哔哩2233牡丹亭卡</h3>
<img src="https://oss.956898603.xyz/2024/02/24/65d97d35bab4c.png" width=45% />
<ul>
<li><a href="https://cloud.bankofchina.com/sh/api/net/common/url/adr?id=bilibilicardziyou">🔗申请链接</a></li>
</ul>
<h3 id="洛天依">洛天依</h3>
<img src=https://i.imgur.com/S9q5WuJ.png width=45% />
<blockquote>
<p>此卡面已绝版</p>
</blockquote>
<ul>
<li><a href="https://cloud.bankofchina.com/sh/html/h5/card/luotianyi_ad.html">🔗申请链接</a></li>
</ul>
<h2 id="邮储银行">邮储银行</h2>
<h3 id="闪光卡">闪光卡</h3>
<img src=https://www.psbc.com/cn/grfw/yxk/jjkqjf/jjkztk/202101/W020210321315482448693.png width=20% />
<ul>
<li><a href="https://wap.psbc.com/zh/static/h5/dzkp/index.html?c1=2#/card-list?act=3">🔗申请链接</a></li>
</ul>
<h2 id="招商银行">招商银行</h2>
<h3 id="哔哩哔哩2233花嫁卡">哔哩哔哩2233花嫁卡</h3>
<img src="https://s3gw.cmbimg.com/s/L2xhMDhfMjJfb25saW5lMjAyMC4xMS8lRTUlQjAlODElRTklOUQlQTIlRTUlOEQlQTElRTclODklODdfMTY0NjAxMjY3ODYwNz9BV1NBY2Nlc3NLZXlJZD1sYTA4X3VzZXIxMyZFeHBpcmVzPTQ4MDE2ODYyNzgmU2lnbmF0dXJlPUpOc3hlaDZnb2pieFZxZGpIc3RiQTFzOVk5VSUzRCZyZXNwb25zZS1jb250ZW50LWRpc3Bvc2l0aW9uPWF0dGFjaG1lbnQlM0JmaWxlbmFtZSUzRCUyNUU1JTI1QjAlMjU4MSUyNUU5JTI1OUQlMjVBMiUyNUU1JTI1OEQlMjVBMSUyNUU3JTI1ODklMjU4NyUzQmZpbGVuYW1lKiUzRFVURi04JTI3JTI3JTI1RTUlMjVCMCUyNTgxJTI1RTklMjU5RCUyNUEyJTI1RTUlMjU4RCUyNUExJTI1RTclMjU4OSUyNTg3/sIa4moiu5cdRVd-fkGoFohjeGf4=/la08_user13/0" width=50% />
<ul>
<li><a href="https://mobile.cmbchina.com/dcamobile/applycard/fillapplyinfo.html?Organization=100531&amp;AuthCode=&amp;_urlrefer=PLATFORM&amp;FamilyBranchId=100&amp;BranchID=100&amp;RecmCode=&amp;FamilyOriginCode=F00000GCA000000000000100sssqcx015665000000000000000000000000&amp;FamilyCorperationCode=F00000GCA000000000000100sssqcx0156650000000wxmgm000000000000&amp;wechatData=&amp;appflag=0&amp;FamilyRecmCode=&amp;FamilyOrganization=100531&amp;CorperationCode=T00018GCA000000000000100qjflby016028000000000000000000000000&amp;FamilyUtmId=">🔗申请链接</a></li>
</ul>
<h3 id="明日方舟">明日方舟</h3>
<img src="https://s3gw.cmbimg.com/s/L2xhMDhfMjJfb25saW5lMjAyMC4xMS8lRTUlQjAlODElRTklOUQlQTIlRTUlOEQlQTElRTclODklODdfMTYwOTExOTE1MDk5MD9BV1NBY2Nlc3NLZXlJZD1sYTA4X3VzZXIxMyZFeHBpcmVzPTQ3NjQ3OTI3NTEmU2lnbmF0dXJlPW1TV1dvUWpUJTJCbXFCNnR0NVBIUlExR1lJd2lZJTNEJnJlc3BvbnNlLWNvbnRlbnQtZGlzcG9zaXRpb249YXR0YWNobWVudCUzQmZpbGVuYW1lJTNEJTI1RTUlMjVCMCUyNTgxJTI1RTklMjU5RCUyNUEyJTI1RTUlMjU4RCUyNUExJTI1RTclMjU4OSUyNTg3JTNCZmlsZW5hbWUqJTNEVVRGLTglMjclMjclMjVFNSUyNUIwJTI1ODElMjVFOSUyNTlEJTI1QTIlMjVFNSUyNThEJTI1QTElMjVFNyUyNTg5JTI1ODc=/WR9Uy9BPfoolEKLODRQ1C9PqWgo=/la08_user13/0" width=50% />
<ul>
<li><a href="https://mobile.cmbchina.com/dcamobile/applycard/fillapplyinfo.html?Organization=100531&amp;AuthCode=&amp;_urlrefer=PLATFORM&amp;FamilyBranchId=100&amp;BranchID=100&amp;RecmCode=&amp;FamilyOriginCode=F00000GCA000000000000100sssqcx015665000000000000000000000000&amp;FamilyCorperationCode=F00000GCA000000000000100sssqcx0156650000000wxmgm000000000000&amp;wechatData=&amp;appflag=0&amp;FamilyRecmCode=&amp;FamilyOrganization=100531&amp;CorperationCode=T00276GCA000000000000100qjflby016029000000000000000000000000&amp;FamilyUtmId=">🔗申请链接</a></li>
</ul>
<h2 id="中信银行">中信银行</h2>
<h3 id="四叶草白金卡">四叶草白金卡</h3>
<img src="http://autoload.bank.ecitic.com/ebank/docs/cardpic/20200304162501.jpg" width=35% />
<ul>
<li><a href="https://wap.bank.ecitic.com/NMBFOServer/MobileBankWeb/?index=DebitCard.ApplyDebitCard.Index&amp;ACCNOID=0000000002&amp;CHANLNO=WBLC01&amp;cardType=20200813000000000170626751504c6a69394a76">🔗申请链接</a></li>
</ul>
<h3 id="美国运通金卡">美国运通金卡</h3>
<img src="http://autoload.bank.ecitic.com/ebank/docs/cardpic/20230518150241.jpg" width=35% />
<ul>
<li><a href="https://wap.bank.ecitic.com/NMBFOServer/MobileBankWeb/?index=DebitCard.ApplyDebitCard.Index&amp;ACCNOID=0000000001&amp;CHANLNO=WBAE01&amp;cardType=70344119982575247376d56507066316170556b">🔗申请链接</a></li>
</ul>
<h3 id="mastercard-世界卡">MasterCard 世界卡</h3>
<img src="http://autoload.bank.ecitic.com/ebank/docs/cardpic/20200620113613.jpg" width=20% />
<ul>
<li><a href="https://wap.bank.ecitic.com/NMBFOServer/MobileBankWeb/?index=DebitCard.ApplyDebitCard.Index&amp;ACCNOID=0000000001&amp;CHANLNO=WBWS01&amp;cardType=7018477217091026945326a3931613247567441">🔗申请链接</a></li>
</ul>
<h2 id="广发银行">广发银行</h2>
<h3 id="京东财富白金卡">京东财富白金卡</h3>
<img src=https://kjimg10.360buyimg.com/jccaadmin/jfs/t1/7067/40/22816/96161/65112340F358c6fed/77b16d83b81228a2.png width=35% />
<ul>
<li><a href="https://3.cn/-1VNzbPZ">🔗申请链接</a></li>
</ul>
<h2 id="民生银行">民生银行</h2>
<h3 id="携程联名卡">携程联名卡</h3>
<img src="https://oss.956898603.xyz/2024/02/23/65d828b84d698.png" width=20%/>
<ul>
<li><a href="https://m1.cmbc.com.cn/CMBC_MBServer/new/app/mobile-bank-h5/open-card-online/detail?prodCode=ODC0257">🔗申请链接</a></li>
</ul>
<h2 id="浙商银行">浙商银行</h2>
<h3 id="携程联名卡-2">携程联名卡</h3>
<img src=https://www.czbank.com/cn/other2/wbhz/xclmkzm.jpg width=20% />
<ul>
<li><a href="https://e.czbank.com/weixinHTML/debitCardApplication/debitCardInformationEntry.html">🔗申请链接</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[暴力计算获取 洋葱Onion V3 域名]]></title>
        <id>https://blog.saky.site/post/onionV3/</id>
        <link href="https://blog.saky.site/post/onionV3/">
        </link>
        <updated>2024-02-28T03:38:13.000Z</updated>
        <content type="html"><![CDATA[<p>.onion 的域名生成是私钥 &gt;（rsa）&gt; 公钥 &gt;（sha1）&gt; 杂凑值 &gt;（base32 编码）&gt; 得到最终的 .onion。</p>
<p>一个使用 CPU 计算的工具：<a href="https://github.com/cathugger/mkp224o">mkp224o</a><br>
前置条件</p>
<pre><code class="language-shell">sudo apt install gcc libc6-dev libsodium-dev make autoconf
</code></pre>
<h2 id="编译暴力计算工具">编译暴力计算工具</h2>
<p>下载项目</p>
<pre><code class="language-shell">git clone https://github.com/cathugger/mkp224o.git
</code></pre>
<p>进入项目目录</p>
<pre><code class="language-shell">cd mkp224o
</code></pre>
<p>生成配置脚本</p>
<pre><code class="language-shell">./autogen.sh
</code></pre>
<p>生成 makefile</p>
<pre><code class="language-shell">./configure   # 默认能保证最大的兼容性
# ./configure --enable-amd64-51-30k   # 添加合适的参数可以优化
</code></pre>
<p>开始构建</p>
<pre><code class="language-shell">make
</code></pre>
<p>构建完成后，在目录就能看到编译出的 <code>mkp224o</code> 。</p>
<blockquote>
<p>后面的参数 <code>--enable-amd64-51-30k</code> 传递给配置脚本可以加快密钥生成速度；不同 CPU 有不同的参数可以优化，运行 <code>./configure --help</code> 查看​​所有可用选项。具体说明： <a href="https://github.com/cathugger/mkp224o/blob/master/OPTIMISATION.txt">https://github.com/cathugger/mkp224o/blob/master/OPTIMISATION.txt</a></p>
</blockquote>
<blockquote>
<p><code>--enable-amd64-51-30k</code> 表示启用 <code>amd64-51-30k SUPERCOP ed25519</code> 实现。该实现使用AMD64架构，采用了一种特定的优化方法，适用于性能要求较低的环境。<code>--enable-amd64-64-24k</code> 表示启用<code>amd64-64-24k SUPERCOP ed25519</code> 实现，采用了不同的优化策略，适用于性能要求更高的环境。</p>
</blockquote>
<h2 id="使用-mkp224o">使用 mkp224o</h2>
<p>开始计算</p>
<pre><code class="language-shell">./mkp224o -d keys shellblock
</code></pre>
<ul>
<li><code>keys</code>，是保存密钥的目录，</li>
<li><code>shellblock</code>，生成的地址，要是 shellblock 打头，具体规则请看项目主页。</li>
</ul>
<p>可以用 tmux 或 screen 运行 mkp224o ，这样断线也可以继续跑了。勿用 VPS 长时间跑，100% 占用</p>
<h2 id="让-tor-使用生成的密钥">让 tor 使用生成的密钥</h2>
<p>将密钥文件夹（尽管技术上仅需要 hs_ed25519_secret_key ）复制到某位置：</p>
<pre><code class="language-shell">sudo cp -r onion域名  /var/lib/tor/service
# /var/lib/tor/service： 密钥文件夹，自行更改路径
</code></pre>
<p>调整所有权和权限：</p>
<pre><code class="language-shell">sudo chown -R debian-tor: /var/lib/tor/service
sudo chmod -R 700 /var/lib/tor/service
</code></pre>
<p>然后编辑 <code>torrc</code> 将密钥文件夹改成新的：</p>
<pre><code class="language-shell">sudo vim /etc/tor/torrc

HiddenServiceDir /var/lib/tor/vfly2_service
HiddenServicePort 80 127.0.0.1:8080
</code></pre>
<p>重新加载后，tor 应该会拾取它。</p>
<pre><code class="language-shell">sudo systemctl reload tor
sudo systemctl status tor
</code></pre>
<p>此时就可以在 Tor Browser 访问你的 .onion 地址</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://blog.vfly2.com/2023/10/building-an-onion-website/">深夜……搭建 洋葱网站@承飞之咎</a></li>
<li><a href="https://www.anwangxia.com/200.html">Tor Onion v3地址生成@暗网下</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[YOLOv8安装+入门训练]]></title>
        <id>https://blog.saky.site/post/yolov8-build/</id>
        <link href="https://blog.saky.site/post/yolov8-build/">
        </link>
        <updated>2024-01-29T10:06:19.000Z</updated>
        <content type="html"><![CDATA[<p>在开始本教程之前请确保已经科学上网</p>
<h2 id="anaconda-安装">Anaconda 安装</h2>
<p>下载地址：<a href="https://www.anaconda.com/download/">Free Download | Anaconda</a><br>
我们需要安装 anaconda，双击打开安装程序，下一步直到选择路径</p>
<blockquote>
<p>这里不要在其他盘符新建文件夹，请务必使用默认的路径直接安装，否则可能会出现奇怪的 bug</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://oss.956898603.xyz/2024/01/29/65b7792298b63.png" alt="" loading="lazy"></figure>
<p>勾选如图选项，然后点击 install 安装。后续完成安装即可。<br>
如果安装程序有提示失败，那么可以尝试完全卸载后再勾选最后一个选项安装。</p>
<h3 id="anaconda-升级-python">anaconda 升级 python</h3>
<ol>
<li>先更新conda</li>
</ol>
<pre><code class="language-shell">conda upgrade conda
</code></pre>
<p>如果上一步更新失败，执行这个命令即可</p>
<pre><code>conda update --force conda
</code></pre>
<p><strong>常见报错解决方法</strong><br>
报错1：<code>CondaHTTPError: HTTP 000 CONNECTION FAILED</code></p>
<p>conda配置镜像源：</p>
<pre><code class="language-shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/
conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
conda config --append channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
 
 
conda config --set show_channel_urls yes
</code></pre>
<p>报错2：<code>CondaValueError: Malformed version string '~': invalid character(s).</code></p>
<pre><code class="language-shell">conda upgrade -n base -c defaults --override-channels conda
</code></pre>
<ol start="2">
<li>更新anaconda</li>
</ol>
<pre><code class="language-shell">conda update anaconda
</code></pre>
<ol start="3">
<li>安装python，这个命令默认升级到最新版本</li>
</ol>
<pre><code class="language-shell">conda install python
</code></pre>
<p>本文以<code>3.8</code>为例说明</p>
<pre><code class="language-shell">conda install python=3.8
</code></pre>
<h2 id="yolov8">Yolov8</h2>
<p>新建一个<code>yolo</code>文件夹，CMD进入文件夹，克隆存储库</p>
<pre><code class="language-shell">git clone https://github.com/ultralytics/ultralytics.git
git clone https://github.com/HumanSignal/labelImg.git
</code></pre>
<p>将 labelimg 项目放在 ultralytics项目文件夹目录下，方便 pycharm 使用<br>
<img src="https://oss.956898603.xyz/2024/01/29/65b77a4c92205.png" alt="" loading="lazy"></p>
<h2 id="pycharm-中的-yolov8-项目配置环境">Pycharm 中的 yolov8 项目配置环境</h2>
<p>打开 pycharm，导入文件夹<br>
<img src="https://oss.956898603.xyz/2024/01/29/65b77baa88fac.png" alt="" loading="lazy"><br>
<img src="https://oss.956898603.xyz/2024/01/29/65b77bd09b177.png" alt="" loading="lazy"><br>
接下来我们设置编译器环境。按照下图所示，设置使用<code>anaconda</code>，python 版本统一选择 <code>3.8</code>，然后点击确定。<br>
<img src="https://oss.956898603.xyz/2024/01/29/65b77c38a3d43.png" alt="" loading="lazy"><br>
<img src="https://oss.956898603.xyz/2024/01/29/65b77c8b8d85c.png" alt="" loading="lazy"><br>
然后重新启动 pycharm 进行镜像源设置<br>
下面是一些镜像源，需要一条一条的添加进去。名称随意，授权默认无。</p>
<pre><code class="language-url">http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
 
http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
 
http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/
 
http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
 
http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
</code></pre>
<p>全部添加进去后点击应用，确定</p>
<h2 id="pytorch安装">Pytorch安装</h2>
<p>进入<a href="https://pytorch.org/">https://pytorch.org/</a>，往下拉，本文以<code>Windows</code>+<code>Conda</code>为例说明<br>
<img src="https://oss.956898603.xyz/2024/01/29/65b77f0b92409.png" alt="" loading="lazy"></p>
<h3 id="amd显卡">AMD显卡</h3>
<p><strong>注意</strong>：AMD显卡，不支持cuda，所以无法安装GPU版本的pytorch</p>
<pre><code class="language-shell">conda install pytorch torchvision torchaudio cpuonly
</code></pre>
<p><strong>检验pytorch是否安装好</strong>：</p>
<pre><code class="language-shell">python

import torch

torch.__version__
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://oss.956898603.xyz/2024/01/29/65b7801180bbb.png" alt="" loading="lazy"></figure>
<h3 id="nvidia-显卡">nVidia 显卡</h3>
<pre><code class="language-shell">conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia
</code></pre>
<p><strong>检验pytorch是否安装好</strong>：</p>
<pre><code class="language-shell">python

import torch

torch.cuda.is_available()
</code></pre>
<p>如果返回<code>True</code>，那就证明没有问题了。如果返回<code>False</code>，可能是因为你的显卡驱动版本过低</p>
<h2 id="yolov8-demo项目">yolov8 demo项目</h2>
<p>再次回到 pycharm 主界面，会提示安装依赖包（其实一直都会提示，只不过这个时候我们才理会这个）。点击安装即可。</p>
<p>这里需要多等一会儿，如果安装卡主，可以退出 pycharm 重新打开会提示安装依赖包。重新点击即可。不过可能无法全部完成安装，会有一些包最终还是安装失败。使用下面的命令来安装。</p>
<pre><code class="language-shell">pip install ultralytics -i https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<p>继续在终端里输入命令，来运行下 yolo 的图像检测，看看是否真的成功了。命令如下：</p>
<pre><code class="language-shell">yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source='你想要检测的文件路径'
</code></pre>
<blockquote>
<p>文件路径格式的一个例子：D:/yolo/pic/123.jpg</p>
</blockquote>
<p>执行后，看到会自动下载 github 上 pt 这个文件，并且开始进行图像检测。</p>
<p>运行结束后在 <code>ultralytics\runs\detect</code> 文件夹中会生成检测完成后的图片打开图片。</p>
<h2 id="参考文章">参考文章</h2>
<ul>
<li>https://www.alantorp.online/archives/884/12/17/</li>
<li>https://blog.csdn.net/qq_42233538/article/details/129997616</li>
<li>https://blog.csdn.net/weixin_44110563/article/details/123324304</li>
<li>https://docs.ultralytics.com/zh/quickstart/</li>
<li>https://youtu.be/_a7cVL9hqnk</li>
<li>https://www.ruan-cat.com/ruan-cat-own-notes/python/yolov8/yolov8.html</li>
<li>https://zhuanlan.zhihu.com/p/603272140</li>
<li>https://www.bilibili.com/read/cv23913741/</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AutoBangumi + Plex 自动追番]]></title>
        <id>https://blog.saky.site/post/autobangumi-plex/</id>
        <link href="https://blog.saky.site/post/autobangumi-plex/">
        </link>
        <updated>2024-01-21T04:48:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本教程基于CentOS 64位说明</p>
</blockquote>
<h2 id="autobangumi-使用docker-cli-部署">AutoBangumi (使用Docker-cli 部署)</h2>
<pre><code class="language-shell">docker run -d \
  --name=AutoBangumi \
  -v /opt/AutoBangumi/config:/app/config \
  -v /opt/AutoBangumi/data:/app/data \
  -p 7892:7892 \
  -e TZ=Asia/Shanghai \
  -e PUID=$(id -u) \
  -e PGID=$(id -g) \
  -e UMASK=022 \
  --network=bridge \
  --dns=8.8.8.8 \
  --restart unless-stopped \
  estrellaxd/auto_bangumi
</code></pre>
<p>进入<code>http://AutoBangumi host:7892</code> 进行配置</p>
<p>相关配置详见官方说明文档：<a href="https://www.autobangumi.org/config/program.html">https://www.autobangumi.org/config/program.html</a></p>
<h2 id="准备-mikan-rss-订阅链接">准备 Mikan RSS 订阅链接</h2>
<p>AutoBangumi 可以自动解析番剧聚合 RSS，根据字幕组以及番剧名称生成下载规则， 从而实现自动追番。<br>
需要注意的是，目前<a href="https://mikanani.me/"> Mikan Project 主站</a>已经被墙，当你不知道如何使用代理时请使用如下链接进行访问订阅：<br>
Mikan Project CN：<a href="https://mikanime.tv/">https://mikanime.tv/</a></p>
<p><strong>获取订阅地址</strong><br>
注册并且获得 Mikan Project 的 RSS 地址：<br>
<img src="https://www.autobangumi.org/assets/rss-token.b1588c53.png" alt="" loading="lazy"></p>
<p>获取的 RSS 地址如下：</p>
<pre><code>https://mikanani.me/RSS/MyBangumi?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# 或者
https://mikanime.tv/RSS/MyBangumi?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
</code></pre>
<p><strong>Mikan Project 订阅贴士</strong><br>
由于 AutoBangumi 会解析所有获得的 RSS 信息，因此在订阅番剧的时候需要注意以下几点：</p>
<ul>
<li>在个人设置中打开高级设置。<br>
<img src="https://www.autobangumi.org/assets/advanced-subscription.87187bed.png" alt="" loading="lazy"></li>
<li>一部番剧只订阅一个字幕组，点击 Mikan Project 的番剧图片即可呼出二级菜单，选择一个字幕组订阅即可。</li>
<li>如果字幕组有简体繁体不同的字幕，Mikan Project 大多时候提供了选择订阅的方式，选择一种字幕订阅。</li>
<li>如果不提供简繁选择，那么可以在 AutoBangumi 中设置<code>filter</code>进行过滤，也可以在规则生成之后进入 qBittorrent 中手动过滤。</li>
<li>目前不支持 OVA 以及 剧场版 的订阅解析。</li>
</ul>
<h2 id="plex-安装">Plex 安装</h2>
<pre><code class="language-shell">yum install -y wget &amp;&amp; wget -O plexmediaserver.rpm https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm &amp;&amp; rpm -i plexmediaserver.rpm
</code></pre>
<ul>
<li>默认端口号：32400</li>
<li>访问 <code>http://plex host:32400/web</code>安装</li>
</ul>
<p><strong>Plex for Android TV</strong><br>
下载:</p>
<ul>
<li><a href="http://dl.012233.xyz/f/22821665-1012001144-e3f82d?p=1772">城通网盘</a>（访问密码：1772）</li>
<li><a href="https://www.123pan.com/s/xqPUVv-Pdvo.html">123盘</a></li>
<li><a href="https://pan.moelove.tk/oss/%E8%BD%AF%E4%BB%B6/plex/plex%20Android%20TV.apk">MoeCloud</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[操作系统实验报告（Linux编程基础实验）]]></title>
        <id>https://blog.saky.site/post/os-report/</id>
        <link href="https://blog.saky.site/post/os-report/">
        </link>
        <updated>2023-12-25T02:57:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="操作系统实验报告">操作系统实验报告</h1>
<h2 id="linux编程基础实验">Linux编程基础实验</h2>
<h3 id="一-设计目的">一、设计目的：</h3>
<ol>
<li>
<p>了解 Linux 编程环境和编程工具。</p>
</li>
<li>
<p>掌握基本的 Linux 系统命令及执行过程</p>
</li>
<li>
<p>了解 shell的作用及主要分类。</p>
</li>
<li>
<p>掌握shell 脚本程序运行原理及基础语法，学会编写简单的 shell 脚本程序。</p>
</li>
</ol>
<h3 id="二-设计内容">二、设计内容：</h3>
<p>编写 Linux bash 脚本文件实现查看目录 home 中包含的文件数量和子目录数量，并以以下格式输出到文件 fle.ini 中，格式如下：</p>
<pre><code>[ 文件夹 ]
文件夹下文件(夹)1
文件夹下文件(夹)2
...
[文件夹 2]
文件夹下文件(夹)1
文件夹下文件(夹)2
...
[Directories Count]
10
[ File Count ]
4
</code></pre>
<h3 id="三-设计任务和要求">三、设计任务和要求：</h3>
<h4 id="31-实验准备">3.1 实验准备：</h4>
<ul>
<li>确保拥有 Linux 操作系统环境</li>
<li>了解基本的 Linux 命令行操作</li>
<li>了解 Bash 脚本的基础语法</li>
</ul>
<h4 id="32-实验基本知识及原理">3.2 实验基本知识及原理：</h4>
<p>Linux 操作系统提供了强大的命令行工具，Bash 是其中一种常用的 Shell。Bash 脚本可以用于自动化执行一系列任务，包括文件和目录的操作。在脚本中，可以使用循环、条件语句等结构，以及一系列 Linux 命令来实现特定的功能。</p>
<h4 id="33-实验说明">3.3 实验说明：</h4>
<p>创建一个 Bash 脚本文件（比如 <code>count_files.sh</code>）。在脚本中使用循环和条件语句遍历指定目录下的文件和子目录。输出每个子目录及其下文件的列表，并格式化输出到指定的文件 <code>file.ini</code> 中。统计目录数量和文件数量，将结果输出到文件 <code>file.ini</code> 中。运行脚本并检查生成的 <code>file.ini</code> 文件，确保输出符合预期格式。</p>
<h3 id="四-可选器材">四、可选器材：</h3>
<p>Linux实验环境</p>
<h3 id="五-参考资料">五、参考资料：</h3>
<p>《Linux 编程基础》《计算机操作系统实验指导》</p>
<h3 id="六-实验内容">六、实验内容</h3>
<blockquote>
<p>count_files.sh</p>
</blockquote>
<pre><code class="language-bash">#!/bin/bash

# 输出文件路径
output_file=&quot;file.ini&quot;

# 遍历 home 目录
for entry in &quot;$HOME&quot;/*; do
  # 检查是否为目录
  if [ -d &quot;$entry&quot; ]; then
    # 输出目录名称
    echo &quot;[$(basename &quot;$entry&quot;)]&quot;

    # 遍历目录中的文件和子目录
    for sub_entry in &quot;$entry&quot;/*; do
      # 输出文件或子目录
      echo &quot;$(basename &quot;$sub_entry&quot;)&quot;
    done

    # 输出空行
    echo &quot;&quot;
  fi
done

# 统计目录数量
directory_count=$(find &quot;$HOME&quot; -type d | wc -l)
# 统计文件数量
file_count=$(find &quot;$HOME&quot; -type f | wc -l)

# 输出目录数量
echo &quot;[Directories Count]&quot; &gt;&gt; &quot;$output_file&quot;
echo &quot;$directory_count&quot; &gt;&gt; &quot;$output_file&quot;

# 输出文件数量
echo &quot;[File Count]&quot; &gt;&gt; &quot;$output_file&quot;
echo &quot;$file_count&quot; &gt;&gt; &quot;$output_file&quot;

echo &quot;操作完成。请查看 $output_file 文件。&quot;
</code></pre>
<p>确保在保存脚本后给予执行权限：</p>
<pre><code class="language-bash">chmod +x count_files.sh
</code></pre>
<p>然后执行脚本：</p>
<pre><code class="language-bash">./count_files.sh
</code></pre>
<p>这将生成一个包含目录和文件信息的 <code>file.ini</code> 文件。</p>
<h3 id="七-实验结论">七、实验结论</h3>
<h4 id="71-实验难点">7.1 实验难点</h4>
<p>在之前没有接触过 Linux 操作系统，在使用命令行进行各项操作的时候，可能会有些不适应。Linux 的架构与 Windows 也存在一定的区别。</p>
<h4 id="72实验重点">7.2.实验重点</h4>
<p>熟悉 Linux 的操作环境，了解 shell 脚本基本语法，通过执行脚本文件和C 语言程序进行对比，体会解释执行和编译执行的区别。</p>
<h4 id="版权所有">版权所有</h4>
<ul>
<li><a href="https://www.bilibili.com/read/cv28758487">https://www.bilibili.com/read/cv28758487</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/674003149">https://zhuanlan.zhihu.com/p/674003149</a></li>
<li><a href="https://www.jianshu.com/p/fb45d617acb1">https://www.jianshu.com/p/fb45d617acb1</a></li>
<li><a href="https://blog.csdn.net/shellblock/article/details/135193990">https://blog.csdn.net/shellblock/article/details/135193990</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[兰空图床使用 AWS s3 协议连接 backblaze b2]]></title>
        <id>https://blog.saky.site/post/lsky-b2/</id>
        <link href="https://blog.saky.site/post/lsky-b2/">
        </link>
        <updated>2023-11-18T03:40:06.000Z</updated>
        <content type="html"><![CDATA[<p>AWS s3 的 sdk 中，默认存在 <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html"><strong>ACL</strong></a> 配置，参数值默认为 <code>private</code>，因为 b2 控制台中没有 <strong>ACL</strong> 设置，使用公开的 <strong>bucket</strong> 会出现错误：<code>Cannot parse S3 Canned ACL value of 'private'</code>，所以需要稍微修改点代码，覆盖 <strong>ACL</strong> 配置。</p>
<p>打开文件：</p>
<pre><code class="language-php">// 文件路径：lsky-pro/app/Services/ImageService.php
 bucket: $configs-&gt;get(MinioOption::Bucket), 
</code></pre>
<p>在 356 行下面追加一行：</p>
<pre><code class="language-php">options: ['params' =&gt; ['ACL' =&gt; '']],
</code></pre>
<p><img src="https://oss.956898603.xyz/2023/11/18/65583320be821.png" alt="" loading="lazy"><br>
示例：</p>
<pre><code class="language-php">StrategyKey::Minio =&gt; new AwsS3V3Adapter(
    // ...
    bucket: $configs-&gt;get(MinioOption::Bucket),
    options: ['params' =&gt; ['ACL' =&gt; '']],  // &lt;-- 这里是新增的一行
    // ...
),
</code></pre>
<p>然后在创建储存策略时，选择 Minio 进行配置即可，以下是配置示例：<br>
<img src="https://user-images.githubusercontent.com/22728201/173543674-5ed51652-277e-4a42-b94e-aa5c4c8f1eb9.png" alt="" loading="lazy"></p>
<p>其中的 <code>Bucket</code>、<code>连接地址</code>和<code>区域</code>，可以在 b2 控制台创建 <strong>Backet</strong> 以后找到，<code>AccessKey</code> 和 <code>SecretKey</code> 便是控制台中 <strong>App Key</strong> 中创建的前面，<code>key ID = AccessKey</code>，<code>applicationKey = Secret Key</code>。</p>
<p>注意：</p>
<ul>
<li>不要使用 Master Application Key，它不兼容 S3 协议。</li>
<li>在 2020 年 5 月 4 日之前创建的桶不支持 s3 协议。</li>
</ul>
]]></content>
    </entry>
</feed>